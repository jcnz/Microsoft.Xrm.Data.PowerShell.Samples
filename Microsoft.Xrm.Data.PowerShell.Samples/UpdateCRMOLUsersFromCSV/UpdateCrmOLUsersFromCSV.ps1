# Generated by: Jeffrey Chionh (jcnz)
#

# This script assumes that existing users in D365 need to be moved to different business units and reassigned security roles
# It allows additional security role to be defined in the CSV file, separated by a '|' delimiter


Function New-MsolGroupForCRM
{
    param
    (   
        [String]$MsolGroupName
    )
        
    # This retrievs all groups. If you already know Group Guid, you can use it instead.
    $msolGroup = Get-MsolGroup | ? {$_.DisplayName -eq $msolGroupName}
    
    if($msolGroup -ne $null)
    {
        return $msolGroup.ObjectId
    }
    else
    {
        $msolGroup = New-MsolGroup -DisplayName $msolGroupName
        return $msolGroup.ObjectId
    }
}

Function New-MsolUserFromCsv
{
    param
    (   
        [PSObject]$User,
        [String]$MsolDomainName,
        [Guid]$MsolGroupId
    )

    # You can use Get-MsolAccountSku function to get all available license of the Office 365 instance
    $crmLicenseName = $MsolDomainName + ":CRMSTANDARD"
    $userPrincipalName = $User.UserPrincipalName

    Write-Output "Retrieve MsolUser $userPrincipalName" | Add-Content $strFileName

    $msolUser = Get-MsolUser -UserPrincipalName $userPrincipalName -ErrorAction SilentlyContinue
    
    if($msolUser -ne $null)
    {
        Write-Output "MsolUser $userPrincipalName Found. Checking CRM License" | Add-Content $strFileName


        $crmLicense = $msolUser.Licenses | ? {$_.AccountSkuId -eq $crmLicenseName}
        if($crmLicense -eq $null)
        {
            Write-Output "CrmLicense not assigned. Assigning license." | Add-Content $strFileName

            Set-MsolUserLicense -UserPrincipalName $userPrincipalName -AddLicenses $crmLicenseName
        }
        else
        {
            Write-Output "User $userPrincipalName already exists and has CRM license" | Add-Content $strFileName

        }
    }
    else
    {
        Write-Output "Creating User $UserDisplayName and assign CRM license"  | Add-Content $strFileName


        # Convert string to bool
        $strongPasswordRequired = if($User.StrongPasswordRequired -eq 'true') { $true } else { $false }
        $passwordNeverExpires = if($User.PasswordNeverExpires -eq 'true') { $true } else { $false }
        $forceChangePassword = if($User.ForceChangePassword -eq 'true') { $true } else { $false }
        
        $msolUser = New-MsolUser -UserPrincipalName $User.UserPrincipalName -DisplayName $User.DisplayName `
        -FirstName $User.FirstName -LastName $User.LastName -PhoneNumber $User.PhoneNumber `
        -MobilePhone $User.MobilePhone -PostalCode $User.PostalCode -City $User.City `
        -Country $User.Country -State $User.State -StreetAddress $User.StreetAddress `
        -Title $User.Title -Department $User.Department -Office $User.Office -Fax $User.Fax `
        -UsageLocation $User.UsageLocation -Password $User.Password `
        -StrongPasswordRequired $strongPasswordRequired `
        -PasswordNeverExpires $passwordNeverExpires `
        -ForceChangePassword $forceChangePassword `
        -LicenseAssignment $crmLicenseName
    }
    
    if($MsolGroupId -ne $null)
    {
        Add-MsolGroupMember -GroupObjectId $MsolGroupId -GroupMemberObjectId $msolUser.ObjectId -GroupMemberType User
    }
}

Function Confirm-CrmUserCreation
{
    param
    (   
        [PSObject]$User
		
    )

    $domainName = $User.UserPrincipalName

    # Dynamics CRM Online user will be synchronized if Office 365 user has a valid license.
    # As it may take minutes, do retrieve every 5 seconds in while loop.
    while($true)
    {
        $crmUser = Get-CrmRecords -EntityLogicalName systemuser -FilterAttribute domainname -FilterOperator eq -FilterValue $domainName -Fields domainname,isdisabled
        if($crmUser.CrmRecords.Count -eq 0)
        {
            Start-Sleep -Seconds 5
        }
        else
        {
            if($crmUser.CrmRecords[0].isdisabled_Property.Value -eq $False)
            {
                Write-Output "$domainName is added to CRM system" | Add-Content $strFileName

                $User.SystemUserId = $crmUser.CrmRecords[0].systemuserid.Guid
            }
            else
            {
                Write-Output "$domainName is added to CRM system but disabled state" | Add-Content $strFileName

            }
            break
        }
    }   
}

Function Move-CrmUserBusinessUnit
{
    param
    (   
        [PSObject]$User
    )

    $domainName = $User.UserPrincipalName
    $systemUserId = $User.SystemUserId
    $businessUnitName = $User.BusinessUnitName



    $businessUnit = Get-CrmRecords -EntityLogicalName businessunit -FilterAttribute name -FilterOperator eq -FilterValue $businessUnitName -Fields businessunitid
    
    if($businessUnit.CrmRecords.Count -eq 0)
    {
        Write-Error "Business Unit $businessUnitName does not exist" | Add-Content $strFileName
        return
    }
    else
    {
        Write-Output "Move $domainName to $businessUnitName" | Add-Content $strFileName
        $businessUnitId = $businessUnit.CrmRecords[0].businessunitid.Guid
        Set-CrmUserBusinessUnit -BusinessUnitId $businessUnitId -UserId $systemUserId -ReassignUserId $systemUserId
        $User.BusinessUnitId = $businessUnitId

		Assign-CrmUserSecurityRole -User $User
    }    
}

Function Assign-CrmUserSecurityRole
{
    param
    (   
        [PSObject]$User
	
    )

    $domainName = $User.UserPrincipalName
	# $securityRoleName = $User.SecurityRoleName
    $securityRoleNameArray = $User.SecurityRoleName.Split("|")
    $systemUserId = $User.SystemUserId
    $businessUnitId = $User.BusinessUnitId

	foreach($element in $securityRoleNameArray)
	{
	

		    $fetch = @"
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false" no-lock="true">
  <entity name="role">
    <attribute name="roleid" />
    <filter type="and">
      <condition attribute="name" operator="eq" value="{0}" />
      <condition attribute="businessunitid" operator="eq" value="{1}" />
    </filter>
  </entity>
</fetch>
"@

		$fetch = $fetch -F $element, $businessUnitId

		$securityRole = Get-CrmRecordsByFetch -Fetch $fetch

		if($securityRole.CrmRecords.Count -eq 0)
		{
			Write-Error "SecurityRole $element does not exist" | Add-Content $strFileName
			return
		}
		else
		{
		  Try
		  {
	
			Write-Output "Assign $element to $domainName" | Add-Content $strFileName
			$securityRoleId = $securityRole.CrmRecords[0].roleid.Guid
			Add-CrmSecurityRoleToUser -UserId $systemUserId -SecurityRoleId $securityRoleId
		  }
		  Catch
		  {
		      $ErrorActionPreference="continue"
		  }
			
		}   
	}

 
}

# Script parameters #
$msolUser = "updateme@unknown.com"
$msolPassword = ConvertTo-SecureString -String "password" -AsPlainText -Force
$msolDomainName = "<DomainName>"
#$msolGroupName = "<Office 365 Group name>"
$csvPath = ".\O365Users2.csv"

$crmAdminUser = "updateme@unknown.com"
$crmAdminPassword = ConvertTo-SecureString -String "password" -AsPlainText -Force
$crmOrgName = "orgd34f0cab"
# Script parameters #

$strFileName = ".\output.log"
If (Test-Path $strFileName){
	Remove-Item $strFileName
}
Write-Output "Connecting to Office 365 as $msolUser" | Add-Content $strFileName

Import-Module MSOnline
Import-Module Microsoft.Xrm.Data.Powershell
$msolCred = New-Object System.Management.Automation.PSCredential ($msolUser,$msolPassword) 
Try
{
    Connect-MsolService -Credential $msolCred -ErrorAction Stop
}
Catch
{
     throw
}

Write-Output "Connecting to CRM Online as $crmAdminUser" | Add-Content $strFileName
$crmCred = New-Object System.Management.Automation.PSCredential ($crmAdminUser,$crmAdminPassword) 
Try
{
    # You can also use Get-CrmConnection to directly create connection.
    # See https://msdn.microsoft.com/en-us/library/dn756303.aspx for more detail.
    #Connect-CrmOnlineDiscovery -Credential $crmCred -ErrorAction Stop
	Get-CrmConnection -DeploymentRegion Oceania -OnlineType Office365 -OrganizationName $crmOrgName -Credential $crmCred -ErrorAction Stop
	
}
Catch
{
     throw
}

# You can omit this function if you do not want to add users to a group.
#Write-Output "Creating Azure AD Group"
#$msolGroupId = New-MsolGroupForCRM -MsolGroupName $msolGroupName

Write-Output "Loading User CSV File" | Add-Content $strFileName
$users = Import-Csv -Path $csvPath

# Do not pass $msolGroupId in case you don't want to add users to a group.
#Write-Output "Creating Azure AD User"
#$users | % {New-MsolUserFromCsv -User $_ -MsolDomainName $msolDomainName -MsolGroupId $msolGroupId}

Write-Output "Confirm Crm User on Dynamics CRM Online" | Add-Content $strFileName
$users | % {Confirm-CrmUserCreation -User $_}


Write-Output "Move Crm User to BusinessUnit" | Add-Content $strFileName
$users | % {Move-CrmUserBusinessUnit -User $_}

#Write-Output "Assign Security Role to Crm User"
#$users | % {Assign-CrmUserSecurityRole -User $_}

Write-Output "Completed" | Add-Content $strFileName
